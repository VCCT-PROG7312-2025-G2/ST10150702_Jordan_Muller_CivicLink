// Core models for local events and announcements with categories and date management
using System.ComponentModel.DataAnnotations;

namespace CivicLink.Models
{
    /* 
     * Summary: This file contains the Event model used to store information about
     * local community events and municipal announcements. It includes properties
     * for event details, categorization, and date management.
     */

    public class Event
    {
        // Unique identifier for each event
        public int Id { get; set; }

        // Event name/title
        [Required(ErrorMessage = "Event name is required")]
        [StringLength(150, ErrorMessage = "Name cannot exceed 150 characters")]
        public string Name { get; set; }

        // Full description of the event
        [Required(ErrorMessage = "Description is required")]
        [StringLength(1000, ErrorMessage = "Description cannot exceed 1000 characters")]
        public string Description { get; set; }

        // What type of event this is
        [Required(ErrorMessage = "Category is required")]
        public EventCategory Category { get; set; }

        // Where the event takes place
        [Required(ErrorMessage = "Location is required")]
        [StringLength(200)]
        public string Location { get; set; }

        // When the event starts
        [Required(ErrorMessage = "Start date is required")]
        public DateTime StartDate { get; set; }

        // When the event ends
        public DateTime? EndDate { get; set; }

        // Contact person for more info
        public string ContactPerson { get; set; }

        // Phone number for inquiries
        [Phone(ErrorMessage = "Please enter a valid phone number")]
        public string ContactPhone { get; set; }

        // Email for inquiries
        [EmailAddress(ErrorMessage = "Please enter a valid email")]
        public string ContactEmail { get; set; }

        // Optional website link
        [Url(ErrorMessage = "Please enter a valid URL")]
        public string WebsiteUrl { get; set; }

        // Is this event free to attend
        public bool IsFree { get; set; }

        // Cost if not free
        public decimal? Cost { get; set; }

        // When this event was added to the system
        public DateTime CreatedAt { get; set; }

        // Track if event is still active
        public bool IsActive { get; set; } = true;

        // Store image path if event has a poster
        public string ImagePath { get; set; }
    }

    // Different types of community events
    public enum EventCategory
    {
        CommunityMeeting,
        TownHall,
        PublicHearing,
        Recreation,
        Education,
        Health,
        Safety,
        Environment,
        Arts,
        Sports,
        Festival,
        Workshop,
        Other
    }

    // Model for announcements which are different from events
    public class Announcement
    {
        public int Id { get; set; }

        [Required]
        [StringLength(200)]
        public string Title { get; set; }

        [Required]
        [StringLength(2000)]
        public string Content { get; set; }

        // When announcement was posted
        public DateTime PublishedDate { get; set; }

        // How important is this announcement
        public AnnouncementPriority Priority { get; set; }

        // Still relevant or expired
        public bool IsActive { get; set; } = true;

        // Department that posted it
        public string Department { get; set; }
    }

    // How urgent is the announcement
    public enum AnnouncementPriority
    {
        Low,
        Normal,
        High,
        Urgent
    }

    /* 
     * ============================================
     * Generated by Claude 2025-10-14
     * ============================================
     */
    // View model for the events page combining events and search data
    public class EventsViewModel
    {
        // All events to display
        public List<Event> Events { get; set; } = new List<Event>();

        // All announcements to show
        public List<Announcement> Announcements { get; set; } = new List<Announcement>();

        // Available categories for filtering
        public HashSet<EventCategory> AvailableCategories { get; set; } = new HashSet<EventCategory>();

        // Unique dates that have events
        public HashSet<DateTime> EventDates { get; set; } = new HashSet<DateTime>();

        // Events recommended based on user searches
        public Queue<Event> RecommendedEvents { get; set; } = new Queue<Event>();

        // Recently viewed events
        public Stack<Event> RecentlyViewed { get; set; } = new Stack<Event>();

        // Current search term if any
        public string SearchTerm { get; set; }

        // Current category filter if any
        public EventCategory? FilterCategory { get; set; }

        // Current date filter if any
        public DateTime? FilterDate { get; set; }
    }
}
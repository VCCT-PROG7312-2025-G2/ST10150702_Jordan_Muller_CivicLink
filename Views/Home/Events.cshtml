@* Local events and announcements display with search, filter, sort, and recommendation features *@

@model CivicLink.Models.EventsViewModel
@{
    ViewBag.Title = "Local Events - City of Cape Town";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="events-page-wrapper">
    <!-- Page Header -->
    <div class="events-header">
        <div>
            <h1>Discover Local Events</h1>
            <p>Stay connected with community happenings across Cape Town</p>
        </div>
        <div style="text-align: right;">
            <span class="events-count-badge">@Model.Events.Count Events</span>
        </div>
    </div>

    <!-- Search and Filter Bar -->
    <div class="filter-container">
        <form asp-action="Events" method="get" id="searchForm">
            <div class="filter-grid">

                <!-- Search Input -->
                <div>
                    <label class="filter-label">Search Events</label>
                    <input type="text"
                           name="searchTerm"
                           value="@Model.SearchTerm"
                           placeholder="Event name, location, description..."
                           class="filter-input" />
                </div>

                <!-- Category Filter -->
                <div>
                    <label class="filter-label">Category</label>
                    <select name="category" class="filter-select">
                        <option value="">All Categories</option>
                        @foreach (var cat in Enum.GetValues(typeof(CivicLink.Models.EventCategory)))
                        {
                            <option value="@cat" selected="@(Model.FilterCategory?.ToString() == cat.ToString())">
                                @cat.ToString().Replace("CommunityMeeting", "Community Meeting")
                                .Replace("TownHall", "Town Hall")
                                .Replace("PublicHearing", "Public Hearing")
                            </option>
                        }
                    </select>
                </div>

                <!-- Date Filter -->
                <div>
                    <label class="filter-label">Date</label>
                    <input type="date"
                           name="date"
                           value="@Model.FilterDate?.ToString("yyyy-MM-dd")"
                           class="filter-date" />
                </div>

                <!-- Search Button -->
                <div>
                    <button type="submit" class="search-btn">
                        <i class="fas fa-search me-2"></i>Search
                    </button>
                </div>
            </div>

            <!-- Sort Options -->
            <div class="sort-container">
                <span class="sort-label">Sort by:</span>
                <button type="submit" name="sortBy" value="date" class="sort-btn">Date</button>
                <button type="submit" name="sortBy" value="name" class="sort-btn">Name</button>
                <button type="submit" name="sortBy" value="category" class="sort-btn">Category</button>

                @if (!string.IsNullOrWhiteSpace(Model.SearchTerm) || Model.FilterCategory.HasValue || Model.FilterDate.HasValue)
                {
                    <a href="@Url.Action("Events")" class="clear-filters-btn">Clear Filters</a>
                }
            </div>
        </form>
    </div>

    <!-- Recommendations Section -->
    @if (Model.RecommendedEvents != null && Model.RecommendedEvents.Count > 0)
    {
        <div class="recommendations-section">
            <div class="recommendations-header">
                <i class="fas fa-lightbulb"></i>
                <h2>Recommended For You</h2>
            </div>
            <div class="recommendations-grid">
                @foreach (var recommended in Model.RecommendedEvents.Take(3))
                {
                    <div class="recommendation-card">
                        <span class="recommendation-badge">
                            @recommended.Category.ToString().Replace("CommunityMeeting", "Community")
                        </span>
                        <h3 class="recommendation-title">@recommended.Name</h3>
                        <p class="recommendation-date">
                            <i class="fas fa-calendar me-1"></i>
                            @recommended.StartDate.ToString("MMM dd, yyyy")
                        </p>
                        <a href="@Url.Action("EventDetails", new { id = recommended.Id })" class="recommendation-link">
                            View Details →
                        </a>
                    </div>
                }
            </div>
        </div>
    }

    <!-- Events Grid -->
    <div>
        <h2 style="font-size: 1.8rem; font-weight: 600; margin-bottom: 1.5rem;">
            @if (!string.IsNullOrWhiteSpace(Model.SearchTerm) || Model.FilterCategory.HasValue || Model.FilterDate.HasValue)
            {
                <span>Search Results</span>
            }
            else
            {
                <span>Upcoming Events</span>
            }
        </h2>

        @if (Model.Events.Any())
        {
            <div class="events-grid">
                @foreach (var ev in Model.Events)
                {
                    <div class="event-card" style="border-left: 4px solid @GetCategoryColor(ev.Category);">
                        <div class="event-card-content">

                            <!-- Event Header -->
                            <div class="event-card-header">
                                <span class="event-category-badge" style="background: @GetCategoryColor(ev.Category);">
                                    @ev.Category.ToString().Replace("CommunityMeeting", "Community Meeting")
                                    .Replace("TownHall", "Town Hall")
                                    .Replace("PublicHearing", "Public Hearing")
                                </span>

                                @if (!ev.IsFree)
                                {
                                    <span class="event-price-badge event-price-paid">R@ev.Cost</span>
                                }
                                else
                                {
                                    <span class="event-price-badge event-price-free">FREE</span>
                                }
                            </div>

                            <!-- Event Title -->
                            <h3 class="event-title">@ev.Name</h3>

                            <!-- Event Description -->
                            <p class="event-description">
                                @(ev.Description.Length > 120 ? ev.Description.Substring(0, 120) + "..." : ev.Description)
                            </p>

                            <!-- Event Details -->
                            <div class="event-details">
                                <div class="event-detail-item">
                                    <i class="fas fa-calendar event-detail-icon"></i>
                                    <span>@ev.StartDate.ToString("ddd, MMM dd, yyyy")</span>
                                </div>
                                <div class="event-detail-item">
                                    <i class="fas fa-clock event-detail-icon"></i>
                                    <span>@ev.StartDate.ToString("h:mm tt")</span>
                                </div>
                                <div class="event-detail-item">
                                    <i class="fas fa-map-marker-alt event-detail-icon"></i>
                                    <span>@ev.Location</span>
                                </div>
                            </div>

                            <!-- View Button -->
                            <a href="@Url.Action("EventDetails", new { id = ev.Id })" class="event-view-btn">
                                View Full Details
                            </a>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="no-events-container">
                <i class="fas fa-calendar-times no-events-icon"></i>
                <h3 class="no-events-title">No Events Found</h3>
                <p class="no-events-text">Try adjusting your search criteria or check back later for new events.</p>
                <a href="@Url.Action("Events")" class="no-events-btn">View All Events</a>
            </div>
        }
    </div>
</div>

@functions {
    /*
     * ============================================
     * Generated by Claude 2025-01-15
     * ============================================
     */

    // Get color based on event category for visual distinction
    string GetCategoryColor(CivicLink.Models.EventCategory category)
    {
        return category switch
        {
            CivicLink.Models.EventCategory.CommunityMeeting => "#007AFF",
            CivicLink.Models.EventCategory.TownHall => "#5856D6",
            CivicLink.Models.EventCategory.PublicHearing => "#AF52DE",
            CivicLink.Models.EventCategory.Recreation => "#34C759",
            CivicLink.Models.EventCategory.Education => "#FF9500",
            CivicLink.Models.EventCategory.Health => "#FF3B30",
            CivicLink.Models.EventCategory.Safety => "#FF2D55",
            CivicLink.Models.EventCategory.Environment => "#30D158",
            CivicLink.Models.EventCategory.Arts => "#BF5AF2",
            CivicLink.Models.EventCategory.Sports => "#FF9F0A",
            CivicLink.Models.EventCategory.Festival => "#FF375F",
            CivicLink.Models.EventCategory.Workshop => "#5E5CE6",
            _ => "#8E8E93"
        };
    }
}

@section Scripts {
    <script>
        // Add loading state to search button
        document.getElementById('searchForm').addEventListener('submit', function () {
            const button = this.querySelector('button[type="submit"]');
            button.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Searching...';
            button.disabled = true;
        });

        /*
        * ============================================
        * Generated by Claude 2025-01-15
        * ============================================
        */
        // Smooth scroll animations for event cards
        // I really wanted some nice smooth animations however, I am use to React & Typescript so needed some help to get this working in plain JS
        // Was quite a nice learning experience 
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach((entry, index) => {
                if (entry.isIntersecting) {
                    setTimeout(() => {
                        entry.target.style.opacity = '1';
                        entry.target.style.transform = 'translateY(0)';
                    }, index * 100);
                    observer.unobserve(entry.target);
                }
            });
        }, observerOptions);

        // Observe all event cards
        document.querySelectorAll('.events-page-wrapper > div > div > div').forEach(card => {
            card.style.opacity = '0';
            card.style.transform = 'translateY(20px)';
            card.style.transition = 'all 0.5s ease-out';
            observer.observe(card);
        });
    </script>
}
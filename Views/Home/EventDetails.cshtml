@* Detailed view of a single event with full information and contact details *@

@model CivicLink.Models.Event
@{
    ViewBag.Title = Model.Name + " - City of Cape Town";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@functions {
    // Get color for each category to maintain consistency
    string GetCategoryColor(CivicLink.Models.EventCategory category)
    {
        return category switch
        {
            CivicLink.Models.EventCategory.CommunityMeeting => "#007AFF",
            CivicLink.Models.EventCategory.TownHall => "#5856D6",
            CivicLink.Models.EventCategory.PublicHearing => "#AF52DE",
            CivicLink.Models.EventCategory.Recreation => "#34C759",
            CivicLink.Models.EventCategory.Education => "#FF9500",
            CivicLink.Models.EventCategory.Health => "#FF3B30",
            CivicLink.Models.EventCategory.Safety => "#FF2D55",
            CivicLink.Models.EventCategory.Environment => "#30D158",
            CivicLink.Models.EventCategory.Arts => "#BF5AF2",
            CivicLink.Models.EventCategory.Sports => "#FF9F0A",
            CivicLink.Models.EventCategory.Festival => "#FF375F",
            CivicLink.Models.EventCategory.Workshop => "#5E5CE6",
            _ => "#8E8E93"
        };
    }

    // Get user-friendly category display name
    string GetCategoryDisplayName(CivicLink.Models.EventCategory category)
    {
        return category switch
        {
            CivicLink.Models.EventCategory.CommunityMeeting => "Community Meeting",
            CivicLink.Models.EventCategory.TownHall => "Town Hall",
            CivicLink.Models.EventCategory.PublicHearing => "Public Hearing",
            CivicLink.Models.EventCategory.Recreation => "Recreation",
            CivicLink.Models.EventCategory.Education => "Education",
            CivicLink.Models.EventCategory.Health => "Health",
            CivicLink.Models.EventCategory.Safety => "Safety",
            CivicLink.Models.EventCategory.Environment => "Environment",
            CivicLink.Models.EventCategory.Arts => "Arts",
            CivicLink.Models.EventCategory.Sports => "Sports",
            CivicLink.Models.EventCategory.Festival => "Festival",
            CivicLink.Models.EventCategory.Workshop => "Workshop",
            _ => category.ToString()
        };
    }


}

<div class="event-details-wrapper">
    <!-- Back Button -->
    <a href="@Url.Action("Events")" class="back-link">
        <i class="fas fa-arrow-left"></i>
        Back to Events
    </a>

    <!-- Event Header Card -->
    <div class="event-header-card" style="border-left: 6px solid @GetCategoryColor(Model.Category);">
        <div class="event-badges">
            <span class="event-badge" style="background: @GetCategoryColor(Model.Category); color: white;">
                @GetCategoryDisplayName(Model.Category)
            </span>

            @if (!Model.IsFree)
            {
                <span class="event-badge" style="background: #34C759; color: white;">R@Model.Cost.Value.ToString("0.00")</span>
            }
            else
            {
                <span class="event-badge" style="background: #E5E5EA; color: #1C1C1E;">FREE EVENT</span>
            }
        </div>

        <h1 class="event-main-title">@Model.Name</h1>

        <!-- Key Event Info Grid -->
        <div class="event-info-grid">
            <div class="info-item">
                <div class="info-icon" style="background: linear-gradient(135deg, #007AFF, #0051D5);">
                    <i class="fas fa-calendar-alt"></i>
                </div>
                <div>
                    <div class="info-label">Date</div>
                    <div class="info-value">@Model.StartDate.ToString("MMM dd, yyyy")</div>
                </div>
            </div>

            <div class="info-item">
                <div class="info-icon" style="background: linear-gradient(135deg, #FF9500, #FF6B00);">
                    <i class="fas fa-clock"></i>
                </div>
                <div>
                    <div class="info-label">Time</div>
                    <div class="info-value">@Model.StartDate.ToString("h:mm tt")</div>
                </div>
            </div>

            <div class="info-item">
                <div class="info-icon" style="background: linear-gradient(135deg, #34C759, #28A745);">
                    <i class="fas fa-map-marker-alt"></i>
                </div>
                <div>
                    <div class="info-label">Location</div>
                    <div class="info-value">@Model.Location</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Description Section -->
    <div class="section-card">
        <h2 class="section-title">
            <i class="fas fa-info-circle"></i>
            About This Event
        </h2>
        <p class="section-text">@Model.Description</p>

        @if (Model.EndDate.HasValue)
        {
            <div style="margin-top: 1.5rem; padding: 1rem; background: #F5F5F7; border-radius: 12px;">
                <strong>Event Duration:</strong>
                @Model.StartDate.ToString("MMM dd, h:mm tt") - @Model.EndDate.Value.ToString("MMM dd, h:mm tt")
            </div>
        }
    </div>

    <!-- Contact Information -->
    @if (!string.IsNullOrEmpty(Model.ContactPerson) || !string.IsNullOrEmpty(Model.ContactEmail) || !string.IsNullOrEmpty(Model.ContactPhone))
    {
        <div class="section-card">
            <h2 class="section-title">
                <i class="fas fa-address-card"></i>
                Contact Information
            </h2>

            <div class="contact-grid">
                @if (!string.IsNullOrEmpty(Model.ContactPerson))
                {
                    <div class="contact-item">
                        <div class="contact-icon" style="background: linear-gradient(135deg, #5856D6, #3634A3);">
                            <i class="fas fa-user"></i>
                        </div>
                        <div>
                            <div class="contact-label">Contact Person</div>
                            <div class="contact-value">@Model.ContactPerson</div>
                        </div>
                    </div>
                }

                @if (!string.IsNullOrEmpty(Model.ContactEmail))
                {
                    <div class="contact-item">
                        <div class="contact-icon" style="background: linear-gradient(135deg, #FF9500, #FF6B00);">
                            <i class="fas fa-envelope"></i>
                        </div>
                        <div>
                            <div class="contact-label">Email</div>
                            <a href="mailto:@Model.ContactEmail" class="contact-link">@Model.ContactEmail</a>
                        </div>
                    </div>
                }

                @if (!string.IsNullOrEmpty(Model.ContactPhone))
                {
                    <div class="contact-item">
                        <div class="contact-icon" style="background: linear-gradient(135deg, #34C759, #28A745);">
                            <i class="fas fa-phone"></i>
                        </div>
                        <div>
                            <div class="contact-label">Phone</div>
                            <a href="tel:@Model.ContactPhone" class="contact-link">@Model.ContactPhone</a>
                        </div>
                    </div>
                }

            </div>
        </div>
    }

    <!-- Action Buttons -->
    <div class="event-actions">
        <a href="@Url.Action("Events")" class="action-btn-primary">
            <i class="fas fa-arrow-left me-2"></i>Back to All Events
        </a>
    </div>
</div>


@section Scripts {
    <script>
        // Replicated what Claude did for me in Events.cshtml
        // Animate elements on page load
        document.addEventListener('DOMContentLoaded', function () {
            const elements = document.querySelectorAll('.section-card, .event-header-card');
            elements.forEach((el, index) => {
                el.style.opacity = '0';
                el.style.transform = 'translateY(20px)';
                setTimeout(() => {
                    el.style.transition = 'all 0.5s ease-out';
                    el.style.opacity = '1';
                    el.style.transform = 'translateY(0)';
                }, index * 150);
            });
        });
    </script>
}